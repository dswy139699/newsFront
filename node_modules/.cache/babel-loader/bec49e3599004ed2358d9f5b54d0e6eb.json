{"remainingRequest":"/Users/yushengnan/ysn/node_modules/babel-loader/lib/index.js!/Users/yushengnan/ysn/node_modules/eslint-loader/index.js??ref--13-0!/Users/yushengnan/ysn/src/utils/checkFun.js","dependencies":[{"path":"/Users/yushengnan/ysn/src/utils/checkFun.js","mtime":1611887314535},{"path":"/Users/yushengnan/ysn/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yushengnan/ysn/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yushengnan/ysn/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwpleHBvcnQgZnVuY3Rpb24gY2hlY2tJZENhcmQoaWRjb2RlKSB7CiAgLy8g5Yqg5p2D5Zug5a2QCiAgdmFyIHdlaWdodEZhY3RvciA9IFs3LCA5LCAxMCwgNSwgOCwgNCwgMiwgMSwgNiwgMywgNywgOSwgMTAsIDUsIDgsIDQsIDJdOyAvLyDmoKHpqoznoIEKCiAgdmFyIGNoZWNrQ29kZSA9IFsnMScsICcwJywgJ1gnLCAnOScsICc4JywgJzcnLCAnNicsICc1JywgJzQnLCAnMycsICcyJ107CiAgdmFyIGNvZGUgPSBpZGNvZGUgKyAnJzsKICB2YXIgbGFzdCA9IGlkY29kZVsxN107IC8vIOacgOWQjuS4gOS9jQoKICB2YXIgc2V2ZW50ZWVuID0gY29kZS5zdWJzdHJpbmcoMCwgMTcpOyAvLyBJU08gNzA2NDoxOTgzLk1PRCAxMS0yCiAgLy8g5Yik5pat5pyA5ZCO5LiA5L2N5qCh6aqM56CB5piv5ZCm5q2j56GuCgogIHZhciBhcnIgPSBzZXZlbnRlZW4uc3BsaXQoJycpOwogIHZhciBsZW4gPSBhcnIubGVuZ3RoOwogIHZhciBudW0gPSAwOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICBudW0gPSBudW0gKyBhcnJbaV0gKiB3ZWlnaHRGYWN0b3JbaV07CiAgfSAvLyDojrflj5bkvZnmlbAKCgogIHZhciByZXNpc3VlID0gbnVtICUgMTE7CiAgdmFyIGxhc3RObyA9IGNoZWNrQ29kZVtyZXNpc3VlXTsgLy8g5qC85byP55qE5q2j5YiZCiAgLy8g5q2j5YiZ5oCd6LevCgogIC8qCiAg56ys5LiA5L2N5LiN5Y+v6IO95pivMAogIOesrOS6jOS9jeWIsOesrOWFreS9jeWPr+S7peaYrzAtOQogIOesrOS4g+S9jeWIsOesrOWNgeS9jeaYr+W5tOS7ve+8jOaJgOS7peS4g+WFq+S9jeS4ujE55oiW6ICFMjAKICDljYHkuIDkvY3lkozljYHkuozkvY3mmK/mnIjku73vvIzov5nkuKTkvY3mmK8wMS0xMuS5i+mXtOeahOaVsOWAvAogIOWNgeS4ieS9jeWSjOWNgeWbm+S9jeaYr+aXpeacn++8jOaYr+S7jjAxLTMx5LmL6Ze055qE5pWw5YC8CiAg5Y2B5LqU77yM5Y2B5YWt77yM5Y2B5LiD6YO95piv5pWw5a2XMC05CiAg5Y2B5YWr5L2N5Y+v6IO95piv5pWw5a2XMC0577yM5Lmf5Y+v6IO95pivWAogICovCgogIHZhciBpZGNhcmRQYXR0ZXIgPSAvXlsxLTldWzAtOV17NX0oWzFdWzldWzAtOV17Mn18WzJdWzBdWzB8MV1bMC05XSkoWzBdWzEtOV18WzFdWzB8MXwyXSkoWzBdWzEtOV18WzF8Ml1bMC05XXxbM11bMHwxXSlbMC05XXszfShbMC05XXxbWF0pJC87IC8vIOWIpOaWreagvOW8j+aYr+WQpuato+ehrgoKICB2YXIgZm9ybWF0ID0gaWRjYXJkUGF0dGVyLnRlc3QoaWRjb2RlKTsgLy8g6L+U5Zue6aqM6K+B57uT5p6c77yM5qCh6aqM56CB5ZKM5qC85byP5ZCM5pe25q2j56Gu5omN566X5piv5ZCI5rOV55qE6Lqr5Lu96K+B5Y+356CBCgogIHJldHVybiAhIShsYXN0ID09PSBsYXN0Tm8gJiYgZm9ybWF0KTsKfSAvLyDmoKHpqoznlLXor53lj7fnoIEKCmV4cG9ydCBmdW5jdGlvbiBjaGVja1Bob25lKHRlbFBob25lKSB7CiAgdmFyIHRlbCA9IC9eMFxkezIsM30tP1xkezcsOH0kLzsKICB2YXIgcGhvbmUgPSAvXigoKDEzWzAtOV17MX0pfCgxNVswLTldezF9KXwoMThbMC05XXsxfSkpK1xkezh9KSQvOwoKICBpZiAocGhvbmUudGVzdCh0ZWxQaG9uZSkgfHwgdGVsLnRlc3QodGVsUGhvbmUpKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHJldHVybiBmYWxzZTsKfSAvLyDmoKHpqozpgq7nrrEKCmV4cG9ydCBmdW5jdGlvbiBjaGVja0VtYWlsKGVtYWlsKSB7CiAgLy8gY29uc29sZS5sb2coZW1haWwpCiAgdmFyIG15cmVnID0gL15bYS16QS1aMC05Xy1dK0AoW2EtekEtWjAtOV0rXC4pKyhjb218Y258bmV0fG9yZykkLzsKCiAgaWYgKG15cmVnLnRlc3QoZW1haWwpKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHJldHVybiBmYWxzZTsKfQ=="},{"version":3,"sources":["/Users/yushengnan/ysn/src/utils/checkFun.js"],"names":["checkIdCard","idcode","weightFactor","checkCode","code","last","seventeen","substring","arr","split","len","length","num","i","resisue","lastNo","idcardPatter","format","test","checkPhone","telPhone","tel","phone","checkEmail","email","myreg"],"mappings":";;AAAA,OAAO,SAASA,WAAT,CAAsBC,MAAtB,EAA8B;AACnC;AACA,MAAMC,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,EAAtC,EAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,CAAnD,CAArB,CAFmC,CAGnC;;AACA,MAAMC,SAAS,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,CAAlB;AAEA,MAAMC,IAAI,GAAGH,MAAM,GAAG,EAAtB;AACA,MAAMI,IAAI,GAAGJ,MAAM,CAAC,EAAD,CAAnB,CAPmC,CAOZ;;AAEvB,MAAMK,SAAS,GAAGF,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkB,EAAlB,CAAlB,CATmC,CAWnC;AACA;;AACA,MAAMC,GAAG,GAAGF,SAAS,CAACG,KAAV,CAAgB,EAAhB,CAAZ;AACA,MAAMC,GAAG,GAAGF,GAAG,CAACG,MAAhB;AACA,MAAIC,GAAG,GAAG,CAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5BD,IAAAA,GAAG,GAAGA,GAAG,GAAGJ,GAAG,CAACK,CAAD,CAAH,GAASX,YAAY,CAACW,CAAD,CAAjC;AACD,GAlBkC,CAoBnC;;;AACA,MAAMC,OAAO,GAAGF,GAAG,GAAG,EAAtB;AACA,MAAMG,MAAM,GAAGZ,SAAS,CAACW,OAAD,CAAxB,CAtBmC,CAwBnC;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,MAAME,YAAY,GAAG,wHAArB,CAnCmC,CAqCnC;;AACA,MAAMC,MAAM,GAAGD,YAAY,CAACE,IAAb,CAAkBjB,MAAlB,CAAf,CAtCmC,CAwCnC;;AACA,SAAO,CAAC,EAAEI,IAAI,KAAKU,MAAT,IAAmBE,MAArB,CAAR;AACD,C,CACD;;AACA,OAAO,SAASE,UAAT,CAAqBC,QAArB,EAA+B;AACpC,MAAMC,GAAG,GAAG,qBAAZ;AACA,MAAMC,KAAK,GAAG,oDAAd;;AACA,MAAIA,KAAK,CAACJ,IAAN,CAAWE,QAAX,KAAwBC,GAAG,CAACH,IAAJ,CAASE,QAAT,CAA5B,EAAgD;AAC9C,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,C,CAED;;AAEA,OAAO,SAASG,UAAT,CAAqBC,KAArB,EAA4B;AACjC;AACA,MAAMC,KAAK,GAAG,oDAAd;;AACA,MAAIA,KAAK,CAACP,IAAN,CAAWM,KAAX,CAAJ,EAAuB;AACrB,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD","sourcesContent":["export function checkIdCard (idcode) {\n  // 加权因子\n  const weightFactor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]\n  // 校验码\n  const checkCode = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']\n\n  const code = idcode + ''\n  const last = idcode[17]// 最后一位\n\n  const seventeen = code.substring(0, 17)\n\n  // ISO 7064:1983.MOD 11-2\n  // 判断最后一位校验码是否正确\n  const arr = seventeen.split('')\n  const len = arr.length\n  let num = 0\n  for (let i = 0; i < len; i++) {\n    num = num + arr[i] * weightFactor[i]\n  }\n\n  // 获取余数\n  const resisue = num % 11\n  const lastNo = checkCode[resisue]\n\n  // 格式的正则\n  // 正则思路\n  /*\n  第一位不可能是0\n  第二位到第六位可以是0-9\n  第七位到第十位是年份，所以七八位为19或者20\n  十一位和十二位是月份，这两位是01-12之间的数值\n  十三位和十四位是日期，是从01-31之间的数值\n  十五，十六，十七都是数字0-9\n  十八位可能是数字0-9，也可能是X\n  */\n  const idcardPatter = /^[1-9][0-9]{5}([1][9][0-9]{2}|[2][0][0|1][0-9])([0][1-9]|[1][0|1|2])([0][1-9]|[1|2][0-9]|[3][0|1])[0-9]{3}([0-9]|[X])$/\n\n  // 判断格式是否正确\n  const format = idcardPatter.test(idcode)\n\n  // 返回验证结果，校验码和格式同时正确才算是合法的身份证号码\n  return !!(last === lastNo && format)\n}\n// 校验电话号码\nexport function checkPhone (telPhone) {\n  const tel = /^0\\d{2,3}-?\\d{7,8}$/\n  const phone = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\\d{8})$/\n  if (phone.test(telPhone) || tel.test(telPhone)) {\n    return true\n  }\n  return false\n}\n\n// 校验邮箱\n\nexport function checkEmail (email) {\n  // console.log(email)\n  const myreg = /^[a-zA-Z0-9_-]+@([a-zA-Z0-9]+\\.)+(com|cn|net|org)$/\n  if (myreg.test(email)) {\n    return true\n  }\n  return false\n}\n"]}]}