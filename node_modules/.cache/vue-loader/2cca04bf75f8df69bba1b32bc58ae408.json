{"remainingRequest":"/Users/yushengnan/bysj/ysn/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yushengnan/bysj/ysn/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yushengnan/bysj/ysn/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yushengnan/bysj/ysn/src/views/user/studentLogin.vue?vue&type=template&id=45818208&scoped=true&","dependencies":[{"path":"/Users/yushengnan/bysj/ysn/src/views/user/studentLogin.vue","mtime":1650638391897},{"path":"/Users/yushengnan/bysj/ysn/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yushengnan/bysj/ysn/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yushengnan/bysj/ysn/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yushengnan/bysj/ysn/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}