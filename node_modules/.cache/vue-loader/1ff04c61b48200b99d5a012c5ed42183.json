{"remainingRequest":"/Users/yushengnan/ysn/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yushengnan/ysn/src/components/GlobalForm/index.vue?vue&type=style&index=0&id=01c74a0c&scoped=true&lang=less&","dependencies":[{"path":"/Users/yushengnan/ysn/src/components/GlobalForm/index.vue","mtime":1616039087509},{"path":"/Users/yushengnan/ysn/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yushengnan/ysn/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/yushengnan/ysn/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/yushengnan/ysn/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yushengnan/ysn/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yushengnan/ysn/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIi4vc3R5bGUubGVzcyI7Ci8qLmNvbnRhaW4geyovCiAgLyovZGVlcC8gLmFudC1mb3JtLWl0ZW0geyovCiAgLyogIG1hcmdpbi1ib3R0b206IDEzcHg7Ki8KICAvKn0qLwoKICAvKi9kZWVwLyAuYW50LWNvbC5hbnQtZm9ybS1pdGVtLWxhYmVsIHsqLwogIC8qICBmbG9hdDogbGVmdDsqLwogIC8qfSovCgogIC8qL2RlZXAvIC5hbnQtY29sLmFudC1mb3JtLWl0ZW0tY29udHJvbC13cmFwcGVyIHsqLwogIC8qICBmbG9hdDogbGVmdDsqLwogICAgLy8gIC9kZWVwLyAuYW50LWlucHV0LWRpc2FibGVkLC5hbnQtaW5wdXQtbnVtYmVyLWRpc2FibGVkIHsKICAgIC8vICAgIGJhY2tncm91bmQ6I2ZmZjsKICAgIC8vICAgIGNvbG9yOnJnYmEoMCwgMCwgMCwgMC42NSk7CiAgICAvL30KICAgIC8vICAvZGVlcC8gLmFudC1pbnB1dFtkaXNhYmxlZF17CiAgICAvLyAgICBjb2xvcjpyZ2JhKDAsIDAsIDAsIDAuNjUpOwogICAgLy8gIH0KICAgIC8vICAvZGVlcC8gYW50LWNhbGVuZGFyLXJhbmdlLXBpY2tlci1zZXBhcmF0b3J7CiAgICAvLyAgICBjb2xvcjpyZ2JhKDAsIDAsIDAsIDAuNjUpOwogICAgLy8gIH0KICAvKn0qLwovKn0qLwoK"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/GlobalForm","sourcesContent":["<template>\n  <div>\n    <a-form :form=\"form\">\n      <a-row style=\"\" v-for=\"(data,index) in formData\" :key=\"`${(id)}${(index)}`\">\n        <div v-for=\"(item,i) in data.row\" :key=\"`${(id)}${(index)}${(i)}${item.type}`\">\n          <a-col :span=\"getCol(item.col)\" v-if=\"item.type&&item.type==='children'&&item.name\" :style=\"{display:item.display?'':'none'}\">\n            <slot v-if=\"item.type&&item.type==='children'\" :name=\"item.name\" ></slot>\n          </a-col>\n          <Input v-if=\"item.type&&(item.type==='input' || item.type === 'inputNumber' ||item.type === 'inputPassword')\" :attrData=\"item\" />\n          <!--<InputFigure v-if=\"item.type&&(item.type==='inputFigure')\" :attrData=\"item\" />-->\n          <TextArea v-if=\"item.type&&(item.type==='textarea')\" :attrData=\"item\" />\n          <DatePicker v-if=\"item.type&&(item.type==='datePicker' || item.type === 'rangePicker')\" :attrData=\"item\" />\n          <Select v-if=\"item.type&&item.type==='select'\" :attrData=\"item\"/>\n          <CheckBox v-if=\"item.type&&item.type==='checkBox'\" :attrData=\"item\"/>\n          <Radio v-if=\"item.type&&item.type==='radio'\" :attrData=\"item\"/>\n          <SwitchForm v-if=\"item.type&&item.type==='switch'\" :attrData=\"item\"/>\n          <TextForm v-if=\"item.type&&item.type==='text'&&item.name\" :attrData=\"item\">\n            <template v-slot:text>\n              <slot :name=\"item.name\"></slot>\n            </template>\n          </TextForm>\n          <TextForm v-if=\"item.type&&item.type==='text'&&item.hasOwnProperty('defaultValue')\" :attrData=\"item\"/>\n          <UploadForm v-if=\"item.type&&item.type==='upload'\" :attrData=\"item\"/>\n          <CascaderForm v-if=\"item.type&&item.type==='cascader'\" :attrData=\"item\"/>\n        </div>\n      </a-row>\n    </a-form>\n  </div>\n</template>\n\n<script>\n  import Input from './Input'\n  import TextArea from './TextArea'\n  import DatePicker from './DatePicker'\n  import CheckBox from './CheckBox'\n  import Radio from './Radio'\n  import Select from './Select'\n  import SwitchForm from './Switch'\n  import Vue from 'vue'\n  import TextForm from './Text'\n  import UploadForm from './Upload'\n  import CascaderForm from './Cascader'\n  // import InputFigure from './InputFigure'\n  // import './style.less'\n  // import { setAttr } from '@/utils/transfer.js'\n  // import Select from './select'\n  export default {\n    name: 'Index',\n    props: {\n      dataSource: {\n        type: Array,\n        default: () => { return [] }\n      },\n      id: {\n        type: String,\n        default: ''\n      }\n    },\n    components: {\n      Input,\n      TextArea,\n      DatePicker,\n      Select,\n      CheckBox,\n      Radio,\n      SwitchForm,\n      TextForm,\n      UploadForm,\n      CascaderForm\n      // InputFigure\n    },\n    data () {\n      return {\n        form: ''// this.$form.createForm(this, { name: 'coordinated' })\n      }\n    },\n    created () {\n      this.form = this.$form.createForm(this, {\n        onFieldsChange: (_, changedFields) => {\n          this.$emit('change', changedFields)\n        },\n        mapPropsToFields: () => {\n          return {\n            // name: this.$form.createFormField({//给其中一个表单域赋值\n            //   value: this.name\n            // })\n          }\n        },\n        onValuesChange: (_, values) => {\n          // console.log('formData', _.form.getFieldsValue())// Object.assign({}, _.form.getFieldsValue(), values)\n          // Synchronize to vuex store in real time\n          // this.$store.commit('update', values)\n        }\n      })\n    },\n    mounted () {\n      // const that = this\n      // that[that.id].$on('handleSubmit', function (data) { // 接收当前页的方法，监听\n      // return that.handleSubmit(data, true)\n      // })\n    },\n    beforeUpdate () {\n    },\n    computed: {\n      formData () {\n        // if (this.id) {\n        //   console.log('id', this.id)\n        // Vue.prototype[this.id] = new Vue()// 创建一个中间变量，监听，bus机制\n        Vue.prototype[this.id] = this.form// 直接将创建的form实例挂到vue实例中\n          // setAttr(this.id)\n        // }\n        return this.getFormData(this.dataSource)\n      }\n    },\n    methods: {\n      // 将传过来的formData数据，处理成页面需要展示的数据类型，两个层级，第一层级是行，第二层级是每行的表单\n      getFormData (data) {\n        const newData = this._.cloneDeep(data)\n        const formData = []// 存最终转化成的数据\n        let colSum = 0// 存表单的col和\n        let rowData = []// 存每行表单数据\n        for (let i = 0; i < newData.length; i++) {\n          const col = parseInt(this.getCol(newData[i].col))\n          if (newData[i].id || newData[i].type === 'children') {\n            newData[i].col = this.getCol(newData[i].col)\n            newData[i].layout = this.getLayout(newData[i].layout)\n            if (('display' in newData[i] && newData[i].display) || !('display' in newData[i])) { // 如果默认dom不展示，就不计算宽度\n              colSum = colSum + col\n              newData[i].display = true\n            } else {\n              newData[i].display = false\n            }\n            if (newData[i].lineFeed) { // 如果要单独生成一行\n              if (colSum > col) { // 判断之前是不是还没有生成一行，如果没有，先生成一行\n                formData.push({ row: rowData })\n                rowData = []\n              }\n              rowData.push(newData[i])\n              formData.push({ row: rowData })// 独立生成一行，这个时候循环到这个位置的form全部生成完成，于是continue,开始下次循环\n              rowData = []\n              colSum = 0\n              continue\n            }\n            if (colSum > 24) { // 当大于24时，之前的循环先生成一行\n              formData.push({ row: rowData })\n              rowData = []\n              colSum = col\n              rowData.push(newData[i])// 将本次的form，push进新的数组\n              if (i === newData.length - 1) { // 如果是最后一个form，并且没有生成，那么将单独生成一组\n                formData.push({ row: rowData })\n              }\n            } else if (colSum === 24) { // 如果加上本次循环的form，恰好为24，那么就加上本次的form直接生成一行\n              rowData.push(newData[i])\n              formData.push({ row: rowData })\n              rowData = []\n              colSum = 0\n            } else { // 如果不足24,那么push进之前的数组\n              rowData.push(newData[i])\n              if (i === newData.length - 1) { // 如果是最后一个form，并且没有生成一行，那么只能单独生成一行\n                formData.push({ row: rowData })\n              }\n            }\n          } else {\n            if (i === newData.length - 1 && colSum < 24) {\n              formData.push({ row: rowData })\n            }\n          }\n        }\n        return formData\n      },\n      // submit方法，提交校验并获取一组输入域的值与 Error，若 fieldNames 参数为空，则校验全部组件\n      handleSubmit (fieldName) {\n        // e.preventDefault()\n        let data = null\n        this.form.validateFields(fieldName, (err, values) => {\n          // Object.assign(this, values)// 直接把values赋给this中定义的变量\n          if (!err) {\n            data = values\n          }\n        })\n        return data\n      },\n      // 获取一组输入控件的值，如不传入参数，则获取全部组件的值\n      getFieldsValue (fieldName) { // fieldName为['age','name']\n        let data = null\n        data = this.form.getFieldsValue(fieldName)\n        return data\n      },\n      // 重置一组输入控件的值（为 initialValue）与状态，如不传入参数，则重置所有组件\n      resetFields (fieldName) { // fieldName为['age','name']\n        this.form.resetFields(fieldName)\n      },\n      // 设置一组输入控件的值\n      setFieldsValue (data) { // {'name', '王二麻子'},可以设置多组数据\n        this.form.setFieldsValue(data)\n      },\n      handleSelectChange (value) {\n        this.form.setFieldsValue({\n          note: `Hi, ${value === 'male' ? 'man' : 'lady'}!`\n        })\n      },\n      // 处理formData传过来的col\n      getCol (col) {\n        if (col && parseInt(col) <= 24) { // 如果传了col\n          return col\n        }\n        return '24'// 如果没传，默认24，占满一行\n      },\n      // 处理传过来的layout\n      getLayout (layout) {\n        let lay = {}\n        if (layout && layout.labelCol) { // 如果有传layout，并且layout里有labelCol\n          lay = {\n            labelCol: { style: { width: layout.labelCol } },\n            wrapperCol: { style: { width: `calc(100% - ${layout.labelCol})` } }\n          }\n        } else { // 如果没传，就默认labelCol宽度为100px,wrapperCol宽度为100% - 100px\n          lay = {\n            labelCol: { style: { width: '100px' } },\n            wrapperCol: { style: { width: 'calc(100% -100px)' } }\n          }\n        }\n        return lay\n      }\n    }\n  }\n</script>\n\n<style scoped lang=\"less\">\n  @import \"./style.less\";\n  /*.contain {*/\n    /*/deep/ .ant-form-item {*/\n    /*  margin-bottom: 13px;*/\n    /*}*/\n\n    /*/deep/ .ant-col.ant-form-item-label {*/\n    /*  float: left;*/\n    /*}*/\n\n    /*/deep/ .ant-col.ant-form-item-control-wrapper {*/\n    /*  float: left;*/\n      //  /deep/ .ant-input-disabled,.ant-input-number-disabled {\n      //    background:#fff;\n      //    color:rgba(0, 0, 0, 0.65);\n      //}\n      //  /deep/ .ant-input[disabled]{\n      //    color:rgba(0, 0, 0, 0.65);\n      //  }\n      //  /deep/ ant-calendar-range-picker-separator{\n      //    color:rgba(0, 0, 0, 0.65);\n      //  }\n    /*}*/\n  /*}*/\n\n</style>\n"]}]}