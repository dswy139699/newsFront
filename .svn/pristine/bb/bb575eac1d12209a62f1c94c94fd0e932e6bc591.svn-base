<template>
  <div class="main">
    <a-form
      id="formLogin"
      class="user-layout-login"
      ref="formLogin"
      :form="form"
      :label-col="{ span: 5 }"
      :wrapper-col="{ span: 19 }"
      @submit="handleSubmit"
    >
      <div style="margin-top:70px;">
        <a-alert v-if="isLoginError" type="error" showIcon style="margin-bottom: 24px;" message="账户或密码错误" />
        <a-form-item label="用户名">
          <a-input
            size="large"
            type="text"
            placeholder="请输入用户名"
            v-decorator="[
              'loginId',
              {rules: [{ required: true, message: '请输入用户名' }]}
            ]"
          >
            <a-icon slot="prefix" type="user" :style="{ color: 'rgba(0,0,0,.25)' }"/>
          </a-input>
        </a-form-item>

        <a-form-item label="密码">
          <a-input-password
            size="large"
            placeholder="请输入密码"
            v-decorator="[
              'loginPwd',
              {rules: [{ required: true, message: '请输入密码' }]}
            ]"
          >
            <a-icon slot="prefix" type="lock" :style="{ color: 'rgba(0,0,0,.25)' }"/>
          </a-input-password>
        </a-form-item>
      </div>
      <a-form-item style="margin-top:24px" :wrapper-col="{ span: 19, offset: 5 }" >
        <a-button
          size="large"
          type="primary"
          htmlType="submit"
          class="login-button"
          :loading="state.loginBtn"
          :disabled="state.loginBtn"
        >确定</a-button>
      </a-form-item>
    </a-form>
  </div>
</template>

<script>
// import JSEncrypt from 'jsencrypt'
import { mapActions } from 'vuex'

export default {
  components: {
  },
  data () {
    return {
      customActiveKey: 'tab1',
      loginBtn: false,
      loginType: 0,
      isLoginError: false,
      requiredTwoStepCaptcha: false,
      stepCaptchaVisible: false,
      form: this.$form.createForm(this),
      state: {
        time: 60,
        loginBtn: false,
        loginType: 0,
        smsSendBtn: false
      }
    }
  },
  created () {

  },
  methods: {
    ...mapActions(['Login', 'Logout', 'GetSchool', 'GetClass']),
    // handler
    // handleUsernameOrEmail (rule, value, callback) {
    //   const { state } = this
    //   const regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-9_-]{2,3}){1,2})$/
    //   if (regex.test(value)) {
    //     state.loginType = 0
    //   } else {
    //     state.loginType = 1
    //   }
    //   callback()
    // },
    // handleTabClick (key) {
    //   this.customActiveKey = key
    //   // this.form.resetFields()
    // },
    handleSubmit (e) {
      e.preventDefault()
      const {
        form: { validateFields },
        state,
        Login
      } = this

      state.loginBtn = true

      // const validateFieldsKey = customActiveKey === 'tab1' ? ['username', 'password'] : ['mobile', 'captcha']

      validateFields((err, values) => {
        if (!err) {
          // console.log('login form', values)
          // const Encrypt = new JSEncrypt()// rea加密
          // 加密
          // 加密一个参数公钥
          // const publicKey = 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCBDpSeXubyRUjMHkyqdsVhOIoqHOku+emZOReus3+NbXP2YRerJVuBR7SkMCLVBaxMEgjsBb0os2NXGS0/t1TCUgbu5nuWTBO/fBygMKt1zkVDashWQAtAfE6ZE5VB6RDgzWRd7ZySBjcjKV2sz04l0/wxtevVAyR633o7p9c1xQIDAQAB'
          // Encrypt.setPublicKey(publicKey)
          const data = { ...values }
          // data.loginPwd = Encrypt.encrypt(data.loginPwd)
          // console.log(data)
          Login(data)
            .then((res) => this.loginSuccess(res))
            .catch(err => this.requestFailed(err))
            .finally(() => {
              state.loginBtn = false
            })
        } else {
          setTimeout(() => {
            state.loginBtn = false
          }, 600)
        }
      })
    },
    // getCaptcha (e) {
    //   e.preventDefault()
    //   const { form: { validateFields }, state } = this
    //
    //   validateFields(['mobile'], { force: true }, (err, values) => {
    //     if (!err) {
    //       state.smsSendBtn = true
    //
    //       const interval = window.setInterval(() => {
    //         if (state.time-- <= 0) {
    //           state.time = 60
    //           state.smsSendBtn = false
    //           window.clearInterval(interval)
    //         }
    //       }, 1000)
    //
    //       const hide = this.$message.loading('验证码发送中..', 0)
    //       getSmsCaptcha({ mobile: values.mobile }).then(res => {
    //         setTimeout(hide, 2500)
    //         this.$notification['success']({
    //           message: '提示',
    //           description: '验证码获取成功，您的验证码为：' + res.result.captcha,
    //           duration: 8
    //         })
    //       }).catch(err => {
    //         setTimeout(hide, 1)
    //         clearInterval(interval)
    //         state.time = 60
    //         state.smsSendBtn = false
    //         this.requestFailed(err)
    //       })
    //     }
    //   })
    // },
    // stepCaptchaSuccess () {
    //   this.loginSuccess()
    // },
    // stepCaptchaCancel () {
    //   this.Logout().then(() => {
    //     this.loginBtn = false
    //     this.stepCaptchaVisible = false
    //   })
    // },
    loginSuccess (res) {
      this.GetSchool().then().catch().finally(response => {
      this.GetClass().then()
      this.$store.dispatch('GenerateRoutes', { roles: [], user: res.user || {} }).then(() => { // 写死角色，实际应该根据后台传过来的角色信息
        // 根据roles权限生成可访问的路由表
        // 动态添加可访问路由表
        this.$router.addRoutes(this.$store.getters.addRouters)

      // console.log(res)
      // check res.homePage define, set $router.push name res.homePage
      // Why not enter onComplete
      /*
      this.$router.push({ name: 'analysis' }, () => {
        console.log('onComplete')
        this.$notification.success({
          message: '欢迎',
          description: `${timeFix()}，欢迎回来`
        })
      })
      */
      if (res && res.user && res.user.userType && res.user.userType === 'school') {
        this.$router.push({ path: '/book/solicitManage/courseManage' })
      } else if (res && res.user && res.user.userType && res.user.userType === 'student') {
        this.$router.push({ path: '/book/student/unPayed' })
      }
      // 延迟 1 秒显示欢迎信息
      // setTimeout(() => {
      //   this.$notification.success({
      //     message: '欢迎',
      //     description: `${timeFix()}，欢迎回来`
      //   })
      // }, 1000)
      })
      })
      this.isLoginError = false
    },
    requestFailed (err) {
      this.isLoginError = true
      this.$notification['error']({
        message: '错误',
        description: ((err.response || {}).data || {}).message || '请求出现错误，请稍后再试',
        duration: 4
      })
    }
  }
}
</script>

<style lang="less" scoped>
  .main{
    /*left:50%;*/
    /*position: absolute;*/
    /*top:50%;*/
    /*transform: translate(-50%,-50%);*/
  }
.user-layout-login {
  label {
    font-size: 14px;
  }

  .getCaptcha {
    display: block;
    width: 100%;
    height: 40px;
  }

  .forge-password {
    font-size: 14px;
  }

  button.login-button {
    padding: 0 15px;
    font-size: 16px;
    height: 40px;
    width: 100%;
  }

  .user-login-other {
    text-align: left;
    margin-top: 24px;
    line-height: 22px;

    .item-icon {
      font-size: 24px;
      color: rgba(0, 0, 0, 0.2);
      margin-left: 16px;
      vertical-align: middle;
      cursor: pointer;
      transition: color 0.3s;

      &:hover {
        color: #1890ff;
      }
    }

    .register {
      float: right;
    }
  }
}
</style>
